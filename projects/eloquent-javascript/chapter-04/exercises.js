////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step=1) {
  let storageArray = [];
  if (start === end){
    return storageArray;
  }
  if (step>0) {
     for (let i = start; i <= end; i= i+step){
       storageArray.push(i);
     }
  }
  if (step<0){
    for (let i = start; i >= end; i= i+step){
      storageArray.push(i)
    }
  }
   return storageArray;
 }

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  if (!array.length){
    return 0;
  }
  return array[0] + sum(array.slice(1));
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  let storageArray = []
  for (let i = array.length - 1 ; i >= 0  ; i--){
    storageArray.push(array[i]);
  }
  return storageArray;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  for (let i = 0; i <= (array.length-1)/2 ; i++){
    let front = array[i];
    let back = array[array.length-1-i]
    array[i]=back;
    array[array.length-1-i] = front;
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// skip // referring to 'lists' as an object that's a series of nested nodes
// 
//
//
function arrayToList(array) {
  let rest = null;

  for (let i = array.length-1; i >= 0 ; i--){
    rest = { value: array[i], rest: rest}
  }
  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// skip ////// //// /// /// /// ///

function listToArray(list, output =[]) {
  // Base
  if (list === null){
    return output;
  }
  // Recursion
  output.push(list.value);
  return listToArray(list.rest, output);
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Then add a helper function prepend, which takes an element and a list and 
// creates a new list that adds the element to the front of the input list, 
// and nth, which takes a list and a number and returns the element at the 
// given position in the list (with zero referring to the first element) or 
// undefined when there is no such element. If you havenâ€™t already, also write a recursive version of nth.

function prepend(element, list){
  list = {value: element, rest: list};
  return list
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth() {
  
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// skip
function deepEqual() {

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
