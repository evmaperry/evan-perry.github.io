// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////
// declare flatten function in terms of array parameter
function flatten(array) {
  // declare flattenedArrays variable and assign it to a reduction over array argument
  let flattenedArrays = array.reduce((accumulator, current) => {
    // every iteration, re-assign the accumulator as itself concatted to the current array
    accumulator = accumulator.concat(current);
    // return the accumulator for next iteration of reduce method
    return accumulator;
  }, [])
  return flattenedArrays; // return the flattenedArrays array after reduce method executes
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop() {

}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every() {

}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////
// skip this one if needed.
function dominantDirection() {

}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
